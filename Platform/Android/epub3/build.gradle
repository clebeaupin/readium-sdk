import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.model.native'

model {
    android {
        compileSdkVersion = 23
    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs = [
                            './src/main/jni',
                            '../../../ePub3/ePub'
                    ]
                }
                exportedHeaders {
                    srcDirs = [
                            "./src/main/jni"
                            ]
                }
            }
        }
    }

    android.ndk {
        moduleName = "epub3"

        stl = "gnustl_shared"

        cppFlags.addAll([
                "-std=gnu++11",
                "-fpermissive",
                "-fexceptions",
                "-frtti",
                "-DBUILDING_EPUB3",
                "-I../prefix.h",
                "-I${file("./include")}".toString(),
                "-I${file("./include/ePub3")}".toString(),
                "-I${file("./include/ePub3/utilities")}".toString()
        ])
        ldLibs.addAll(['z', 'android', 'log', 'epub3', 'xml2', 'boost_regex', 'crypto', 'icuuc', 'icui18n', 'icuio', 'icudata'])
    }

    android.buildTypes {
        release {

        }
        debug {
            ndk.with {
                debuggable = true
            }
        }
    }

    android.productFlavors {
        create ("arm") {
            ndk.with {
                abiFilters.add("armeabi-v7a")
                ldFlags.addAll([
                        "-L${file("./obj/local/armeabi-v7a")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/openssl-android/lib/armeabi-v7a")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/icu4c/lib/armeabi-v7a")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/boost/lib/armeabi-v7a")}".toString()
                ])
            }
        }
        create("x86") {
            ndk.with {
                abiFilters.add("x86")
                ldFlags.addAll([
                        "-L${file("./obj/local/x86")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/openssl-android/lib/x86")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/icu4c/lib/x86")}".toString(),
                        "-L${file("../../../ePub3/ThirdParty/boost/lib/x86")}".toString()
                ])
            }
        }
    }
}

/**
 * Prebuild using ndk
 */

task copyBoostIncludes(type: Copy) {
    from '../../../ePub3/ThirdParty/boost/include/boost'
    into './include/boost'
}

task copyLibxmlIncludes(type: Copy) {
    from '../../../ePub3/ThirdParty/libxml2-android/include/libxml'
    into './include/libxml'
}

task copyOpensslIncludes(type: Copy) {
    from '../../../ePub3/ThirdParty/openssl-android/include/openssl'
    into './include/openssl'
}

task copyUtf8Includes(type: Copy) {
    from '../../../ePub3/ThirdParty/utf8-cpp/include'
    into './include/utf8'
}

task copyGoogleUrlBaseIncludes(type: Copy) {
    from '../../../ePub3/ThirdParty/google-url/base'
    into './include/google-url'
    include '**/*.h'
}

task copyGoogleUrlIncludes(dependsOn: 'copyGoogleUrlBaseIncludes', type: Copy) {
    from '../../../ePub3/ThirdParty/google-url/src'
    into './include/google-url'
    include '**/*.h'
}

task copyLibzipBaseIncludes(type: Copy) {
    from '../../../ePub3/ThirdParty/libzip'
    into './include/libzip'
    include '**/*.h'
}

task copyEpub3XmlIncludes(type: Copy) {
    from '../../../ePub3/xml/tree'
    from '../../../ePub3/xml/utilities'
    from '../../../ePub3/xml/validation'
    into './include/ePub3/xml'
    include '**/*.h'
}

task copyEpub3UtilitiesIncludes(dependsOn: 'copyEpub3XmlIncludes', type: Copy) {
    from '../../../ePub3/utilities'
    into './include/ePub3/utilities'
    include '**/*.h'
}

task copyEpub3RootIncludes(dependsOn: 'copyEpub3UtilitiesIncludes', type: Copy) {
    from '../../../ePub3'
    into './include/ePub3'
    include '*.h'
}

task copyEpub3Includes(dependsOn: 'copyEpub3RootIncludes', type: Copy) {
    from '../../../ePub3/ePub'
    into './include/ePub3'
    include '**/*.h'
}

task buildIncludes {
    println "Build includes"
}

buildIncludes.dependsOn "copyEpub3Includes",
"copyBoostIncludes",
"copyLibxmlIncludes",
"copyOpensslIncludes",
"copyUtf8Includes",
"copyGoogleUrlIncludes",
"copyLibzipBaseIncludes"

task buildMk(dependsOn: "buildIncludes", type: Exec) {
    // Retrieve ndk dir
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir', null)

    // Call ndk build
    def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""
    commandLine "$ndkDir/ndk-build${ndkBuildExt}",
            '-C', file('.').absolutePath,
            'NDK_APPLICATION_MK=Application.mk',
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_PROJECT_PATH=.'
}

tasks.whenTaskAdded { task ->
    def taskName = task.name

    if (taskName.startsWith("compile")) {
        task.dependsOn "buildMk"
    }
}
